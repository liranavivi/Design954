<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Plugin.Shared</name>
    </assembly>
    <members>
        <member name="T:Plugin.Shared.Interfaces.IPlugin">
            <summary>
            Interface for plugin implementations that can be dynamically loaded and executed
            by the PluginLoaderProcessor. Plugin must implement this interface to be compatible
            with the plugin loading system.
            Enhanced with hierarchical logging support - maintains consistent ID ordering
            </summary>
        </member>
        <member name="M:Plugin.Shared.Interfaces.IPlugin.ProcessActivityDataAsync(System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.Collections.Generic.List{Shared.Models.AssignmentModel},System.Object,System.Threading.CancellationToken)">
            <summary>
            Processes activity data with hierarchical logging support
            This method will be called by the PluginLoaderProcessor to execute the plugin's business logic
            </summary>
            <param name="orchestratedFlowId">ID of the orchestrated flow entity (Layer 1)</param>
            <param name="workflowId">ID of the workflow (Layer 2)</param>
            <param name="correlationId">Correlation ID for tracking (Layer 3)</param>
            <param name="stepId">ID of the step being executed (Layer 4)</param>
            <param name="processorId">ID of the processor executing the activity (Layer 5)</param>
            <param name="publishId">Unique publish ID for this activity instance (Layer 6)</param>
            <param name="executionId">Unique execution ID for this activity instance (Layer 6)</param>
            <param name="entities">Collection of assignment entities to process</param>
            <param name="inputData">Deserialized input data from previous processor (JsonElement if JSON, null if empty)</param>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>Collection of processed activity data that will be validated against OutputSchema and saved to cache</returns>
        </member>
        <member name="T:Plugin.Shared.Utilities.FilePostProcessing">
            <summary>
            Plugin utilities for file post-processing operations across all file processors
            Provides standardized collision handling, logging, and file operations
            </summary>
        </member>
        <member name="M:Plugin.Shared.Utilities.FilePostProcessing.PostProcessFileAsync``1(System.String,``0,Shared.Correlation.HierarchicalLoggingContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Post-process a file based on configuration using hierarchical logging
            </summary>
            <typeparam name="TConfig">Configuration type that implements IFileProcessingConfiguration</typeparam>
            <param name="filePath">Path to the file to post-process</param>
            <param name="config">Configuration containing processing mode and settings</param>
            <param name="context">Hierarchical logging context</param>
            <param name="logger">Logger for hierarchical logging</param>
            <returns>Task representing the operation</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.FilePostProcessing.PostProcessFileInternalAsync``1(System.String,``0,Shared.Correlation.HierarchicalLoggingContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Internal implementation for hierarchical post-processing operations
            </summary>
        </member>
        <member name="M:Plugin.Shared.Utilities.FilePostProcessing.GenerateProcessedPath(System.String,System.String)">
            <summary>
            Generates a processed file path with collision handling using standardized naming pattern
            Uses pattern: {originalPath}{processedExtension} with counter for collisions
            </summary>
            <param name="filePath">Original file path</param>
            <param name="processedExtension">Extension to add (e.g., ".processed")</param>
            <returns>Processed file path with collision handling applied</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.FilePostProcessing.MarkFileAsProcessed(System.String,System.String,Shared.Correlation.HierarchicalLoggingContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Mark file as processed by adding extension using hierarchical logging
            </summary>
            <param name="filePath">Path to the file to mark as processed</param>
            <param name="processedExtension">Extension to add (e.g., ".processed")</param>
            <param name="context">Hierarchical logging context</param>
            <param name="logger">Logger for hierarchical logging</param>
        </member>
        <member name="M:Plugin.Shared.Utilities.FilePostProcessing.GenerateUniqueFilePath(System.String,System.String)">
            <summary>
            Generates a unique file path with collision handling using precise timestamp
            If file exists: Uses pattern {nameWithoutExt}_{timestamp_with_milliseconds}{extension}
            If file doesn't exist: Uses original filename without changes
            </summary>
            <param name="fileName">Original filename</param>
            <param name="targetDirectory">Target directory path</param>
            <returns>Unique file path with collision handling applied</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.FilePostProcessing.CopyToBackupWithCollisionHandling(System.String,Plugin.Shared.Utilities.IFileProcessingConfiguration,Shared.Correlation.HierarchicalLoggingContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Copy file to backup folder with collision handling using hierarchical logging
            Uses pattern: {nameWithoutExt}_{timestamp_with_milliseconds}{extension}
            </summary>
            <param name="filePath">Path to the file to copy</param>
            <param name="config">Configuration containing backup folder</param>
            <param name="context">Hierarchical logging context</param>
            <param name="logger">Logger for hierarchical logging</param>
        </member>
        <member name="M:Plugin.Shared.Utilities.FilePostProcessing.MoveToBackupWithCollisionHandling(System.String,Plugin.Shared.Utilities.IFileProcessingConfiguration,Shared.Correlation.HierarchicalLoggingContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Move file to backup folder with collision handling using hierarchical logging
            Uses pattern: {nameWithoutExt}_{timestamp_with_milliseconds}{extension}
            </summary>
            <param name="filePath">Path to the file to move</param>
            <param name="config">Configuration containing backup folder</param>
            <param name="context">Hierarchical logging context</param>
            <param name="logger">Logger for hierarchical logging</param>
        </member>
        <member name="M:Plugin.Shared.Utilities.FilePostProcessing.GenerateOutputPath(System.String,System.String)">
            <summary>
            Generates an output file path with collision handling using precise timestamp
            If file exists: Uses pattern {nameWithoutExt}_{timestamp_with_milliseconds}{extension}
            If file doesn't exist: Uses original filename without changes
            </summary>
            <param name="fileName">Original filename</param>
            <param name="outputDirectory">Output directory path</param>
            <returns>Output file path with collision handling applied</returns>
        </member>
        <member name="T:Plugin.Shared.Utilities.FileProcessingMode">
            <summary>
            Defines the different modes for processing files after they have been read
            Each mode specifies what to do with the original file AFTER successfully reading it
            Shared across all file processor types for consistency
            </summary>
        </member>
        <member name="F:Plugin.Shared.Utilities.FileProcessingMode.LeaveUnchanged">
            <summary>
            Leave the original file unchanged after reading
            </summary>
        </member>
        <member name="F:Plugin.Shared.Utilities.FileProcessingMode.MarkAsProcessed">
            <summary>
            Rename file with processed extension (e.g., .processed)
            </summary>
        </member>
        <member name="F:Plugin.Shared.Utilities.FileProcessingMode.Delete">
            <summary>
            Delete the original file after reading
            </summary>
        </member>
        <member name="F:Plugin.Shared.Utilities.FileProcessingMode.MoveToBackup">
            <summary>
            Move file to backup folder (original file moved)
            </summary>
        </member>
        <member name="F:Plugin.Shared.Utilities.FileProcessingMode.CopyToBackup">
            <summary>
            Copy file to backup folder (original file remains)
            </summary>
        </member>
        <member name="F:Plugin.Shared.Utilities.FileProcessingMode.BackupAndMarkProcessed">
            <summary>
            Create timestamped backup copy, then mark as processed
            </summary>
        </member>
        <member name="F:Plugin.Shared.Utilities.FileProcessingMode.BackupAndDelete">
            <summary>
            Create timestamped backup copy, then delete original
            </summary>
        </member>
        <member name="T:Plugin.Shared.Utilities.IFileProcessingConfiguration">
            <summary>
            Interface for file processing configurations to enable shared post-processing utilities
            </summary>
        </member>
        <member name="P:Plugin.Shared.Utilities.IFileProcessingConfiguration.ProcessingMode">
            <summary>
            Processing mode that determines what to do with files after processing
            </summary>
        </member>
        <member name="P:Plugin.Shared.Utilities.IFileProcessingConfiguration.ProcessedExtension">
            <summary>
            Extension to add when marking files as processed
            </summary>
        </member>
        <member name="P:Plugin.Shared.Utilities.IFileProcessingConfiguration.BackupFolder">
            <summary>
            Backup folder path for backup operations
            </summary>
        </member>
        <member name="T:Plugin.Shared.Utilities.PluginHelper">
            <summary>
            Shared utility helper class for plugin operations
            Provides common functionality for cache data manipulation and validation across all plugins
            </summary>
        </member>
        <member name="M:Plugin.Shared.Utilities.PluginHelper.ExtractFileMetadata(System.Text.Json.JsonElement)">
            <summary>
            Extract file metadata from cache data object
            </summary>
            <param name="cacheDataItem">Cache data item from previous plugin</param>
            <returns>File metadata object or null if not found</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.PluginHelper.ExtractFileContent(System.Text.Json.JsonElement)">
            <summary>
            Extract file content from cache data object
            </summary>
            <param name="cacheDataItem">Cache data item from previous plugin</param>
            <returns>File content object or null if not found</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.PluginHelper.GetFileNameFromCacheData(System.Text.Json.JsonElement)">
            <summary>
            Get file name from cache data for logging purposes
            </summary>
            <param name="cacheDataItem">Cache data item</param>
            <returns>File name or "Unknown" if not found</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.PluginHelper.GetFileExtension(System.String)">
            <summary>
            Get file extension from file name
            </summary>
            <param name="fileName">File name</param>
            <returns>File extension (including dot) or empty string</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.PluginHelper.GetMimeType(System.Text.Json.JsonElement)">
            <summary>
            Get MIME type from cache data object
            </summary>
            <param name="cacheDataItem">Cache data item</param>
            <returns>MIME type or empty string if not found</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.PluginHelper.GetFileSize(System.Text.Json.JsonElement)">
            <summary>
            Get file size from cache data object
            </summary>
            <param name="cacheDataItem">Cache data item</param>
            <returns>File size in bytes or 0 if not found</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.PluginHelper.HasValidFileMetadata(System.Text.Json.JsonElement)">
            <summary>
            Check if cache data item has valid file metadata
            </summary>
            <param name="cacheDataItem">Cache data item</param>
            <returns>True if valid metadata exists, false otherwise</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.PluginHelper.HasValidFileContent(System.Text.Json.JsonElement)">
            <summary>
            Check if cache data item has valid file content
            </summary>
            <param name="cacheDataItem">Cache data item</param>
            <returns>True if valid content exists, false otherwise</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.PluginHelper.IsValidCacheDataItem(System.Text.Json.JsonElement)">
            <summary>
            Validate cache data item structure
            </summary>
            <param name="cacheDataItem">Cache data item</param>
            <returns>True if structure is valid, false otherwise</returns>
        </member>
        <member name="T:Plugin.Shared.Utilities.XorUtility">
            <summary>
            Utility for XOR operations on byte data with configurable keys
            Provides methods for encrypting/decrypting data using XOR cipher
            </summary>
        </member>
        <member name="M:Plugin.Shared.Utilities.XorUtility.XorWithByte(System.Byte[],System.Byte,Shared.Correlation.HierarchicalLoggingContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Performs XOR operation on data using a single byte key with hierarchical logging
            </summary>
            <param name="data">Data to XOR</param>
            <param name="key">Single byte XOR key</param>
            <param name="context">Hierarchical logging context</param>
            <param name="logger">Logger for hierarchical logging</param>
            <returns>XOR result as byte array</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.XorUtility.XorWithByteArray(System.Byte[],System.Byte[],Shared.Correlation.HierarchicalLoggingContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Performs XOR operation on data using a byte array key with hierarchical logging
            </summary>
            <param name="data">Data to XOR</param>
            <param name="key">Byte array XOR key (will repeat if shorter than data)</param>
            <param name="context">Hierarchical logging context</param>
            <param name="logger">Logger for hierarchical logging</param>
            <returns>XOR result as byte array</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.XorUtility.XorWithString(System.Byte[],System.String,Shared.Correlation.HierarchicalLoggingContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Performs XOR operation on data using a string key with hierarchical logging
            </summary>
            <param name="data">Data to XOR</param>
            <param name="key">String XOR key (will be converted to UTF-8 bytes)</param>
            <param name="context">Hierarchical logging context</param>
            <param name="logger">Logger for hierarchical logging</param>
            <returns>XOR result as byte array</returns>
        </member>
        <member name="M:Plugin.Shared.Utilities.XorUtility.XorInPlace(System.Byte[],System.Byte,Shared.Correlation.HierarchicalLoggingContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Performs in-place XOR operation on data using a single byte key with hierarchical logging
            Modifies the original data array
            </summary>
            <param name="data">Data to XOR (modified in place)</param>
            <param name="key">Single byte XOR key</param>
            <param name="context">Hierarchical logging context</param>
            <param name="logger">Logger for hierarchical logging</param>
        </member>
        <member name="M:Plugin.Shared.Utilities.XorUtility.XorInPlace(System.Byte[],System.Byte[],Shared.Correlation.HierarchicalLoggingContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Performs in-place XOR operation on data using a byte array key with hierarchical logging
            Modifies the original data array
            </summary>
            <param name="data">Data to XOR (modified in place)</param>
            <param name="key">Byte array XOR key</param>
            <param name="context">Hierarchical logging context</param>
            <param name="logger">Logger for hierarchical logging</param>
        </member>
        <member name="M:Plugin.Shared.Utilities.XorUtility.CalculateXorChecksum(System.Byte[],Shared.Correlation.HierarchicalLoggingContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Calculates a simple XOR checksum of the data with hierarchical logging
            </summary>
            <param name="data">Data to calculate checksum for</param>
            <param name="context">Hierarchical logging context</param>
            <param name="logger">Logger for hierarchical logging</param>
            <returns>XOR checksum as a single byte</returns>
        </member>
    </members>
</doc>
